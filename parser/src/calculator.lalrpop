use std::str::FromStr;
use ast::*;
use lalrpop_util::ErrorRecovery;

grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, (usize, &'input str), ()>>);

pub Exprs = Comma<Expr>;

Dot<T>: Vec<T> = { // (0)
    <v:(<T> ".")+> <e:T> => { // (1)
        let mut v = v;
        v.push(e);
        v
    }
};

Semi<T>: Vec<T> = { // (0)
    <v:(<T> ";")*> <e:T?> => match e { // (1)
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Comma<T>: Vec<T> = { // (0)
    <v:(<T> ",")*> <e:T?> => match e { // (1)
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Pipe<T>: Vec<T> = { // (0)
    <v:(<T> "|")*> <e:T?> => match e { // (1)
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Commaish<T>: Vec<T> = { // (0)
    <(<T> ","?)+> => <>,
};

CommaDef<T>: Vec<T> = { // (0)
    <v:(<T> ",")*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    },
};

Quote: String = {
    // r#"'\\["]'"# => (),

    r#"'[^']'"# => {
      let a = <>;
      a[1..a.len()-1].to_string()
    },
    r#""[^"]*""# => {
      let a = <>;
      a[1..a.len()-1].to_string()
    }
};


Ident: Ident = {
  r"[a-zA-Z_.][.a-zA-Z_0-9']*" => Ident((<>).to_string()),
};

Section: i32 = {
    Ident ("(" ".." ")")? => 0,
    Ident "(" Ident* ")" => 0,
    "module" Ident ("(" Comma<Section> ")")? => 0,
};

Case: CaseCond = {
    <d:PatList> <v:("|" <ExprSpan> "->" <ExprSpan>)*> => CaseCond::Matching(d, v),
    <d:PatList> "->" <v:ExprSpan> => CaseCond::Direct(d, v),
};


ExprSpan: Expr = {
    <Expr+> => Expr::Span(<>),
};

Expr: Expr = {
    Quote => Expr::Str(<>),
    <Ident> => Expr::Ref(<>),
    Num => Expr::Number(<>),

    "\(" CommaDef<ExprSpan> ")" "->" Expr => Expr::Lambda,
    "[" <CommaDef<ExprSpan>> "|" CommaDef<ExprSpan> "]" => Expr::Dummy,
    "[" <CommaDef<ExprSpan>> "]" => Expr::Vector(<>),
    "[" "]" => Expr::Vector(vec![]),
    "(" <CommaDef<ExprSpan>> ")" => Expr::Parens(<>),
    "(" ")" => Expr::Parens(vec![]),
    "(" "," ")" => Expr::Dummy,
    "(" Ident "->" PatList ")" => Expr::Dummy,

    r"\\" r"[a-zA-Z_.][.a-zA-Z_0-9']*" Expr* "->" Expr => Expr::Lambda,

    "`" <Ident> "`" => Expr::Operator(<>.0),
    "\\" => Expr::Operator(<>.to_string()),
    ":" => Expr::Operator(<>.to_string()),
    "." => Expr::Operator(<>.to_string()),
    "/=" => Expr::Operator(<>.to_string()),
    "==" => Expr::Operator(<>.to_string()),
    ".." => Expr::Operator(<>.to_string()),
    "++" => Expr::Operator(<>.to_string()),
    "$" => Expr::Operator(<>.to_string()),
    "&&" => Expr::Operator(<>.to_string()),
    "||" => Expr::Operator(<>.to_string()),
    "<" => Expr::Operator(<>.to_string()),
    "<=" => Expr::Operator(<>.to_string()),
    "<-" => Expr::Operator(<>.to_string()),
    ">" => Expr::Operator(<>.to_string()),
    ">=" => Expr::Operator(<>.to_string()),
    "=<<" => Expr::Operator(<>.to_string()),
    ".|." => Expr::Operator(<>.to_string()),
    ">>=" => Expr::Operator(<>.to_string()),
    "@" => Expr::Operator(<>.to_string()),
    "*" => Expr::Operator(<>.to_string()),
    "+" => Expr::Operator(<>.to_string()),
    "-" => Expr::Operator(<>.to_string()),
    "^" => Expr::Operator(<>.to_string()),
    "::" => Expr::Operator(<>.to_string()),
    ".&." => Expr::Operator(<>.to_string()),

    "case" <e:ExprSpan> "of" "{" <s:Semi<Case>> "}" => Expr::Case(Box::new(e), s),

    "let" "{" Semi<Statement> "}" => Expr::Let,

    "do" "{" <e:Semi<ExprSpan>>
      <w:("where" "{" <Semi<Statement>> "}")?> "}" => Expr::Do(e, w),

    "{" <Comma<(<Expr> "=" <ExprSpan>)>> "}" => Expr::Record(<>),
};

FnDef: Ty = {
    //<a:Type> "=>" <b:Type> => Ty::Where(Box::new(a), Box::new(b)),

    <a:Type> "=>" <b:Type> => b,
    <Type> => <>,
};

Type: Ty = {
    <a:TypeSpan> "->" <b:Type> => Ty::Pair(Box::new(a), Box::new(b)),
    <TypeSpan> => <>,
};

TypeSub: Ty = {
    "!" <TypeSub> => Ty::Not(Box::new(<>)),
    "[" <Type> "]" => Ty::Brackets(Box::new(<>)),
    "(" <CommaDef<Type>> ")" => Ty::Tuple(<>),
    "{" <Comma<(<Ident> "::" <TypeGroup>)>> "}" => Ty::RecordTODO,
    "(" ")" => Ty::EmptyParen,
    <Ident> => Ty::Ref(<>),
};

TypeGroupInner: Ty = {
  <a:TypeSub> "=>" <b:TypeSub> => b,
  <TypeSub> => <>,
};

TypeGroup: Vec<Ty> = {
    <TypeGroupInner+> => <>,
};

TypeSpan: Ty = {
    <TypeSub+> => Ty::Span(<>),
};


PatSub: Pat = {
    "!" <PatSub> => Pat::Not(Box::new(<>)),
    "[" <CommaDef<PatSpan>> "]" => Pat::Brackets(<>),
    "[" "]" => Pat::Brackets(vec![]),
    "(" <PatSpan> ")" => <>,
    "(" <h:PatSpan> "," <t:CommaDef<PatSpan>> ")" => {
        let mut vec = vec![h];
        vec.extend_from_slice(&t);
        Pat::Tuple(vec)
    },
    "(" <i:Ident> "->" <s: PatSpan> ")" => Pat::Arrow(i, Box::new(s)),
    "(" ")" => Pat::EmptyParen,
    <Ident> => Pat::Ref(<>),
    <Quote> => Pat::Str(<>),
    <Num> => Pat::Num(<>),
    ":" => Pat::Dummy,
    "==" => Pat::Dummy,
    "@" => Pat::Dummy,
};

// for matching (Ctor arg arg ...)
PatSpan: Pat = {
    <PatList> => Pat::Span(<>),
};

// for matching e.g. multiple function args
PatList: Vec<Pat> = {
    <PatSub+> => <>,
};


ImportList: Vec<Ident> = {
    "(" <a:Commaish<(<Ident> ("(" ".." ")")?)>> ")" => a,
    "(" ")" => vec![],
    <Ident> => vec![<>],
};

pub Module: Module = {
  "module" <n:Ident> ("(" Comma<Section> ")")?
    "where" "{" <s:Semi<Statement>> "}" => Module {
      name: n,
      statements: s,
    },
};

Statement: Statement = {
  "class" Type ("=>" Ident+)?
    "where" "{" Semi<Statement> "}" => Statement::Class,

  "instance" FnDef
    "where" "{" Semi<Statement> "}" => Statement::Instance,
  "import" ImportList+ => Statement::Import,

  "data" <id:Ident+> "=" <p:Pipe<TypeGroup>>
    <derives:("deriving" <ImportList>)?> =>
      Statement::Data(id[0].clone(), p, derives),
  "newtype" <id:Ident+> "=" <p:Type>
    ("deriving" ImportList)? =>
      Statement::Newtype,

  <i:Ident> "::" <d:FnDef> => Statement::Prototype(i, vec![d]),

  "type" <d:Ident> <args:TypeGroup?> "=" Expr+
    ("where" "{" Semi<Statement> "}")? => Statement::Typedef(d),

  <args:PatList> ("|" Commaish<Expr> "=" Expr+)*
    ("where" "{" Semi<Statement> "}")? => Statement::GuardAssign,

  <args:PatList> "=" <e:ExprSpan>
    ("where" "{" Semi<Statement> "}")? => Statement::Assign(args[0].clone(), args[1..].to_vec(), e),
};

Num: isize = {
    r"[0-9]+" => isize::from_str(<>).unwrap()
};
